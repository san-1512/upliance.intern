System States
enum HeaterState {
    IDLE,
    HEATING,
    STABILIZING,
    TARGET_REACHED,
    OVERHEAT
};
Thresholds
const float TEMP_MIN = 20.0;    // Heating threshold (Celsius)
const float TEMP_TARGET = 23.0; // Desired target (Celsius)
const float TEMP_DELTA = 0.25;  // Margin for stability
const float TEMP_MAX = 28.0;    // Overheat protection
Pin Definitions
#define HEATER_PIN  5    // Output pin for heater relay or simulated output
#define LED_PIN     2    // (Bonus) LED indicator
Read Temperature 
extern "C" uint8_t temprature_sens_read(void);

float read_internal_temp_C() {
    // Returns temp in Fahrenheit, convert to Celsius
    return ((float)temprature_sens_read() - 32) / 1.8; // [9]
}
Main Loop and State Machine
HeaterState currentState = IDLE;

void setup() {
    Serial.begin(115200);
    pinMode(HEATER_PIN, OUTPUT);
    digitalWrite(HEATER_PIN, LOW);
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, LOW);
}

void loop() {
    float temp = read_internal_temp_C();

    // State machine logic
    switch (currentState) {
        case IDLE:
            if (temp < TEMP_MIN) {
                currentState = HEATING;
                digitalWrite(HEATER_PIN, HIGH);  // Turn heater ON
            }
            break;

        case HEATING:
            if (temp >= TEMP_TARGET) {
                currentState = STABILIZING;
            }
            break;

        case STABILIZING:
            if (temp >= TEMP_TARGET && temp < TEMP_TARGET + TEMP_DELTA) {
                currentState = TARGET_REACHED;
                digitalWrite(HEATER_PIN, LOW);   // Turn heater OFF
            }
            break;

        case TARGET_REACHED:
            if (temp < TEMP_TARGET - TEMP_DELTA) {
                currentState = HEATING;
                digitalWrite(HEATER_PIN, HIGH);  // Turn heater ON
            }
            break;

        case OVERHEAT:
            digitalWrite(HEATER_PIN, LOW);       // Always OFF
            if (temp < TEMP_MAX) {
                currentState = IDLE;
            }
            break;
    }

    // Overheat check
    if (temp >= TEMP_MAX) {
        currentState = OVERHEAT;
        digitalWrite(HEATER_PIN, LOW);
    }

    // Visual feedback (Bonus)
    digitalWrite(LED_PIN, (currentState == HEATING) ? HIGH : LOW);

    // Logging
    Serial.print("Temp: "); Serial.print(temp); Serial.print(" C\t");
    Serial.print("State: "); Serial.println(currentState);

    delay(1000); // 1 Hz sampling
}
